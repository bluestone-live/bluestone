pragma solidity ^0.5.0;

import "openzeppelin-solidity/contracts/math/SafeMath.sol";


library _LiquidityPools {
    using SafeMath for uint;

    struct State {
        // token -> deposit term -> PoolGroup
        mapping(address => mapping(uint => PoolGroup)) poolGroups;
    }

    struct PoolGroup {
        bool isInitialized;

        uint firstPoolId;
        uint lastPoolId;

        // pool id -> Pool
        mapping(uint => Pool) poolsById;

        // loan term -> available amount to borrow
        mapping(uint => uint) availableAmountByTerm;
    }

    struct Pool {
        // Total amount deposited to this pool
        uint depositAmount;

        // Total amount borrowed from this pool
        uint borrowedAmount;

        // Total amount that can be borrowed from this pool
        uint availableAmount;

        /// We add loan interest generated by a specific loan amount from this pool.
        /// It will be used to calculate interest for whom deposited to this pool.
        uint loanInterest;
    }

    function initPoolGroupIfNeeded(
        State storage self,
        address tokenAddress,
        uint depositTerm
    )
        external
    {
        if (!self.poolGroups[tokenAddress][depositTerm].isInitialized) {
            /// The length of the PoolGroup should be (depositTerm + 1) because
            /// a deposit will mature in (depositTerm + 1) days.
            /// In other words, lastPoolId - firstPoolId = depositTerm
            self.poolGroups[tokenAddress][depositTerm] = PoolGroup({
                isInitialized: true,
                firstPoolId: 0,
                lastPoolId: depositTerm
            });
        }
    }

    function updatePoolGroupDepositMaturity(
        State storage self,
        address tokenAddress,
        uint depositTerm,
        uint[] calldata loanTermList
    )
        external
    {
        PoolGroup storage poolGroup = self.poolGroups[tokenAddress][depositTerm];

        /// For every loan term N <= current deposit term, subtract N-th pool's availableAmount from
        /// availableAmountByTerm since that amount will not be available after shifting pools.
        for (uint i = 0; i < loanTermList.length; i++) {
            if (loanTermList[i] <= depositTerm) {
                uint loanTerm = loanTermList[i];
                uint poolId = poolGroup.firstPoolId + loanTerm;
                uint availableAmountOfPool = poolGroup.poolsById[poolId].availableAmount;
                poolGroup.availableAmountByTerm[loanTerm] = poolGroup
                    .availableAmountByTerm[loanTerm]
                    .sub(availableAmountOfPool);
            }
        }

        // Free storage of pool to be removed and get some gas refund
        delete poolGroup.poolsById[poolGroup.firstPoolId];

        // Increment pool IDs to reflect the deposit maturity change
        poolGroup.firstPoolId++;
        poolGroup.lastPoolId++;
    }

    function getPool(
        State storage self,
        address tokenAddress,
        uint depositTerm,
        uint poolIndex
    )
        external
        view
        returns (
            uint depositAmount,
            uint borrowedAmount,
            uint availableAmount,
            uint loanInterest
        )
    {
        PoolGroup storage poolGroup = self.poolGroups[tokenAddress][depositTerm];
        Pool storage pool = poolGroup.poolsById[poolGroup.firstPoolId + poolIndex];

        return (
            pool.depositAmount,
            pool.borrowedAmount,
            pool.availableAmount,
            pool.loanInterest
        );
    }
}
